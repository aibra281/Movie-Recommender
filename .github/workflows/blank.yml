import streamlit as st
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import os

# ‚úÖ Ensure set_page_config is the first Streamlit command
st.set_page_config(page_title="Movie Recommender", page_icon="üé•", layout="wide")

# üé¨ Function to Load Dataset
@st.cache_data
def load_data():
    file_path = "./enhanced_movie_data.csv"
    if not os.path.exists(file_path):
        st.error("‚ùå Dataset not found! Please upload 'enhanced_movie_data.csv' to your Hugging Face Space.")
        return pd.DataFrame()
    
    df = pd.read_csv(file_path)
    
    # Ensure required columns exist
    required_columns = {'title', 'overview', 'poster_url', 'genres', 'top_cast', 'release_date', 'IMDb_Rating'}
    if not required_columns.issubset(df.columns):
        st.error("‚ùå Dataset must contain 'title', 'overview', 'poster_url', 'genres', 'top_cast', 'release_date', and 'IMDb_Rating' columns.")
        return pd.DataFrame()

    if df.empty:
        st.warning("‚ö†Ô∏è The dataset is empty! Please check if the CSV file is correct.")
    return df

df = load_data()

# Stop execution if dataset is empty
if df.empty:
    st.stop()

# üéûÔ∏è Function to Recommend Movies
def recommend_movies(title, df, top_n=5):
    df = df.dropna(subset=['overview'])  # Remove rows with missing overviews
    tfidf = TfidfVectorizer(stop_words='english')
    tfidf_matrix = tfidf.fit_transform(df['overview'])
    cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

    indices = pd.Series(df.index, index=df['title']).drop_duplicates()
    if title not in indices:
        st.warning("‚ö†Ô∏è Movie not found. Try another title.")
        return pd.DataFrame()
    
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:top_n+1]
    
    movie_indices = [i[0] for i in sim_scores]
    return df.iloc[movie_indices][['title', 'overview', 'poster_url', 'genres', 'top_cast', 'release_date', 'IMDb_Rating']]

# üé® Streamlit UI
st.markdown("<h1>üé• Movie Recommender Tool</h1>", unsafe_allow_html=True)
st.write("Find your next favorite movie! Select a movie to get recommendations based on plot similarity.")

# üéûÔ∏è Movie selection dropdown
selected_movie = st.selectbox("üé¨ Choose a movie you like:", df['title'].dropna().unique())

# üîç Get recommendations when the button is clicked
if st.button("üîç Get Recommendations"):
    with st.spinner("Finding similar movies..."):
        recommendations = recommend_movies(selected_movie, df)

    if not recommendations.empty:
        st.subheader("üìå Recommended Movies:")
        
        # Display recommendations in a grid format
        for _, row in recommendations.iterrows():
            col1, col2 = st.columns([1, 3])  # Layout: 1 column for image, 3 for text
            
            with col1:
                if pd.notna(row['poster_url']) and row['poster_url'].startswith("http"):
                    st.image(row['poster_url'], width=150)
                else:
                    st.image("https://via.placeholder.com/150", width=150)  # Default placeholder
            
            with col2:
                st.markdown(f"### üé¨ {row['title']}")
                st.write(f"**Release Year**: {row['release_date']}")
                
                # Display genres and top cast (assuming they are stored as strings)
                genres = row['genres'].split(",") if isinstance(row['genres'], str) else []
                top_cast = row['top_cast'].split(",") if isinstance(row['top_cast'], str) else []
                
                st.write(f"**Genres**: {', '.join(genres)}")
                st.write(f"**Top Cast**: {', '.join(top_cast[:3])}")  # Show first 3 actors
                
                # Display IMDb rating
                st.write(f"**IMDb Rating**: {row['IMDb_Rating']}/10")
                
                # Display the movie overview
                st.write(row['overview'])
                
            st.markdown("---")  # Divider


